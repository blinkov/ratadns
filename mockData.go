// Code generated by MockGen. DO NOT EDIT.
// Source: influxdbc.go

// Package mock_main is a generated GoMock package.
package main

import (
        gomock "github.com/golang/mock/gomock"
        dnszeppelin "github.com/niclabs/dnszeppelin"
        reflect "reflect"
        sync "sync"
        time "time"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
        ctrl     *gomock.Controller
        recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
        mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
        mock := &MockDatabase{ctrl: ctrl}
        mock.recorder = &MockDatabaseMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
        return m.recorder
}

// createClient mocks base method
func (m *MockDatabase) createClient(d *database) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "createClient", d)
}

// createClient indicates an expected call of createClient
func (mr *MockDatabaseMockRecorder) createClient(d interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createClient", reflect.TypeOf((*MockDatabase)(nil).createClient), d)
}

// createApi mocks base method
func (m *MockDatabase) createApi(d *database) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "createApi", d)
}

// createApi indicates an expected call of createApi
func (mr *MockDatabaseMockRecorder) createApi(d interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createApi", reflect.TypeOf((*MockDatabase)(nil).createApi), d)
}

// InfluxCollect mocks base method
func (m_2 *MockDatabase) InfluxCollect(resultChannel chan dnszeppelin.DNSResult, exiting chan bool, wg *sync.WaitGroup, wsize, batchSize uint, m *maps) {
        m_2.ctrl.T.Helper()
        m_2.ctrl.Call(m_2, "InfluxCollect", resultChannel, exiting, wg, wsize, batchSize, m)
}

// InfluxCollect indicates an expected call of InfluxCollect
func (mr *MockDatabaseMockRecorder) InfluxCollect(resultChannel, exiting, wg, wsize, batchSize, m interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfluxCollect", reflect.TypeOf((*MockDatabase)(nil).InfluxCollect), resultChannel, exiting, wg, wsize, batchSize, m)
}

// InfluxStore mocks base method
func (m_2 *MockDatabase) InfluxStore(m *maps, batch []dnszeppelin.DNSResult) error {
        m_2.ctrl.T.Helper()
        ret := m_2.ctrl.Call(m_2, "InfluxStore", m, batch)
        ret0, _ := ret[0].(error)
        return ret0
}

// InfluxStore indicates an expected call of InfluxStore
func (mr *MockDatabaseMockRecorder) InfluxStore(m, batch interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfluxStore", reflect.TypeOf((*MockDatabase)(nil).InfluxStore), m, batch)
}

// StoreEachMap mocks base method
func (m *MockDatabase) StoreEachMap(mapa map[string]int, tipo1, tipo2 string, now time.Time) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "StoreEachMap", mapa, tipo1, tipo2, now)
}

// StoreEachMap indicates an expected call of StoreEachMap
func (mr *MockDatabaseMockRecorder) StoreEachMap(mapa, tipo1, tipo2, now interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEachMap", reflect.TypeOf((*MockDatabase)(nil).StoreEachMap), mapa, tipo1, tipo2, now)
}